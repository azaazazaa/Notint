# Имя пользователя с которым надо поздароваться
user_name <- update$effective_user()$first_name
# Отправка приветственного сообщения
bot$sendMessage(update$from_chat_id(),
text = paste0("Моё почтение, ", user_name, "!"),
parse_mode = "Markdown")
}
# создаём обработчик
day <- CommandHandler('day', get_cost_day)
week <- CommandHandler('week', get_cost_week)
month <- CommandHandler('month', get_cost_month)
# Регистрируем
updater <- updater + day + week + month
# Для диалога
updater <- updater + start_h + state_h + reset_h + wait_category_h + wait_cost_h + wait_comment_h
# запускаем бота
updater$start_polling()
state_env
unlist(chat_state)
chat_state <- get_state(update$message$chat_id)
unlist(chat_state)
library(telegram.bot)
library(googlesheets4)
library(data.table)
library(lubridate)
state_env <- ""
source("envFunction.R")
# googlesheets4::gs4_auth()
source("GoogleConn.R")
#
source("Functions.R")
source("GoogleFunctions.R")
# Для обработки диалога
source("Handlers.R")
source("MessageFilters.R")
# создаём экземпляр класса Updater
updater <- Updater(token = Sys.getenv("R_TELEGRAM_BOT_my_life"))
# Пишем метод для приветсвия
say_hello <- function(bot, update) {
# Имя пользователя с которым надо поздароваться
user_name <- update$effective_user()$first_name
# Отправка приветственного сообщения
bot$sendMessage(update$from_chat_id(),
text = paste0("Моё почтение, ", user_name, "!"),
parse_mode = "Markdown")
}
# создаём обработчик
day <- CommandHandler('day', get_cost_day)
week <- CommandHandler('week', get_cost_week)
month <- CommandHandler('month', get_cost_month)
# Регистрируем
updater <- updater + day + week + month
# Для диалога
updater <- updater + start_h + state_h + reset_h + wait_category_h + wait_cost_h + wait_comment_h
# запускаем бота
updater$start_polling()
state_env <- "asd"
library(telegram.bot)
library(googlesheets4)
library(data.table)
library(lubridate)
state_env <- ""
source("envFunction.R")
# googlesheets4::gs4_auth()
source("GoogleConn.R")
#
source("Functions.R")
source("GoogleFunctions.R")
# Для обработки диалога
source("Handlers.R")
source("MessageFilters.R")
# создаём экземпляр класса Updater
updater <- Updater(token = Sys.getenv("R_TELEGRAM_BOT_my_life"))
# Пишем метод для приветсвия
say_hello <- function(bot, update) {
# Имя пользователя с которым надо поздароваться
user_name <- update$effective_user()$first_name
# Отправка приветственного сообщения
bot$sendMessage(update$from_chat_id(),
text = paste0("Моё почтение, ", user_name, "!"),
parse_mode = "Markdown")
}
# создаём обработчик
day <- CommandHandler('day', get_cost_day)
week <- CommandHandler('week', get_cost_week)
month <- CommandHandler('month', get_cost_month)
# Регистрируем
updater <- updater + day + week + month
# Для диалога
updater <- updater + start_h + state_h + reset_h + wait_category_h + wait_cost_h + wait_comment_h
# запускаем бота
updater$start_polling()
library(telegram.bot)
library(googlesheets4)
library(data.table)
library(lubridate)
state_env <- "asd"
source("envFunction.R")
# googlesheets4::gs4_auth()
source("GoogleConn.R")
#
source("Functions.R")
source("GoogleFunctions.R")
# Для обработки диалога
source("Handlers.R")
source("MessageFilters.R")
# создаём экземпляр класса Updater
updater <- Updater(token = Sys.getenv("R_TELEGRAM_BOT_my_life"))
# Пишем метод для приветсвия
say_hello <- function(bot, update) {
# Имя пользователя с которым надо поздароваться
user_name <- update$effective_user()$first_name
# Отправка приветственного сообщения
bot$sendMessage(update$from_chat_id(),
text = paste0("Моё почтение, ", user_name, "!"),
parse_mode = "Markdown")
}
# создаём обработчик
day <- CommandHandler('day', get_cost_day)
week <- CommandHandler('week', get_cost_week)
month <- CommandHandler('month', get_cost_month)
# Регистрируем
updater <- updater + day + week + month
# Для диалога
updater <- updater + start_h + state_h + reset_h + wait_category_h + wait_cost_h + wait_comment_h
# запускаем бота
updater$start_polling()
library(telegram.bot)
library(googlesheets4)
library(data.table)
library(lubridate)
state_env <- "asd"
source("envFunction.R")
# googlesheets4::gs4_auth()
source("GoogleConn.R")
#
source("Functions.R")
source("GoogleFunctions.R")
# Для обработки диалога
source("Handlers.R")
source("MessageFilters.R")
# создаём экземпляр класса Updater
updater <- Updater(token = Sys.getenv("R_TELEGRAM_BOT_my_life"))
# Пишем метод для приветсвия
say_hello <- function(bot, update) {
# Имя пользователя с которым надо поздароваться
user_name <- update$effective_user()$first_name
# Отправка приветственного сообщения
bot$sendMessage(update$from_chat_id(),
text = paste0("Моё почтение, ", user_name, "!"),
parse_mode = "Markdown")
}
# создаём обработчик
day <- CommandHandler('day', get_cost_day)
week <- CommandHandler('week', get_cost_week)
month <- CommandHandler('month', get_cost_month)
# Регистрируем
updater <- updater + day + week + month
# Для диалога
updater <- updater + start_h + state_h + reset_h + wait_category_h + wait_cost_h + wait_comment_h
# запускаем бота
updater$start_polling()
table
table
фыв
library(telegram.bot)
library(googlesheets4)
library(data.table)
library(lubridate)
state_env <- "asd"
source("envFunction.R")
# googlesheets4::gs4_auth()
source("GoogleConn.R")
#
source("Functions.R")
source("GoogleFunctions.R")
# Для обработки диалога
source("Handlers.R")
source("MessageFilters.R")
# создаём экземпляр класса Updater
updater <- Updater(token = Sys.getenv("R_TELEGRAM_BOT_my_life"))
# Пишем метод для приветсвия
say_hello <- function(bot, update) {
# Имя пользователя с которым надо поздароваться
user_name <- update$effective_user()$first_name
# Отправка приветственного сообщения
bot$sendMessage(update$from_chat_id(),
text = paste0("Моё почтение, ", user_name, "!"),
parse_mode = "Markdown")
}
# создаём обработчик
day <- CommandHandler('day', get_cost_day)
week <- CommandHandler('week', get_cost_week)
month <- CommandHandler('month', get_cost_month)
# Регистрируем
updater <- updater + day + week + month
# Для диалога
updater <- updater + start_h + state_h + reset_h + wait_category_h + wait_cost_h + wait_comment_h
# запускаем бота
updater$start_polling()
library(telegram.bot)
library(googlesheets4)
library(data.table)
library(lubridate)
state_env <- "asd"
source("envFunction.R")
# googlesheets4::gs4_auth()
source("GoogleConn.R")
#
source("Functions.R")
source("GoogleFunctions.R")
# Для обработки диалога
source("Handlers.R")
source("MessageFilters.R")
# создаём экземпляр класса Updater
updater <- Updater(token = Sys.getenv("R_TELEGRAM_BOT_my_life"))
# Пишем метод для приветсвия
say_hello <- function(bot, update) {
# Имя пользователя с которым надо поздароваться
user_name <- update$effective_user()$first_name
# Отправка приветственного сообщения
bot$sendMessage(update$from_chat_id(),
text = paste0("Моё почтение, ", user_name, "!"),
parse_mode = "Markdown")
}
# создаём обработчик
day <- CommandHandler('day', get_cost_day)
week <- CommandHandler('week', get_cost_week)
month <- CommandHandler('month', get_cost_month)
# Регистрируем
updater <- updater + day + week + month
# Для диалога
updater <- updater + start_h + state_h + reset_h + wait_category_h + wait_cost_h + wait_comment_h
# запускаем бота
updater$start_polling()
library(telegram.bot)
library(googlesheets4)
library(data.table)
library(lubridate)
state_env <- "asd"
source("envFunction.R")
# googlesheets4::gs4_auth()
source("GoogleConn.R")
#
source("Functions.R")
source("GoogleFunctions.R")
# Для обработки диалога
source("Handlers.R")
source("MessageFilters.R")
# создаём экземпляр класса Updater
updater <- Updater(token = Sys.getenv("R_TELEGRAM_BOT_my_life"))
# Пишем метод для приветсвия
say_hello <- function(bot, update) {
# Имя пользователя с которым надо поздароваться
user_name <- update$effective_user()$first_name
# Отправка приветственного сообщения
bot$sendMessage(update$from_chat_id(),
text = paste0("Моё почтение, ", user_name, "!"),
parse_mode = "Markdown")
}
# создаём обработчик
day <- CommandHandler('day', get_cost_day)
week <- CommandHandler('week', get_cost_week)
month <- CommandHandler('month', get_cost_month)
# Регистрируем
updater <- updater + day + week + month
# Для диалога
updater <- updater + start_h + state_h + reset_h + wait_category_h + wait_cost_h + wait_comment_h
# запускаем бота
updater$start_polling()
dt_inner <- cost_data %>% copy()
cost_data
dt_inner
today <- as.POSIXct(Sys.Date())
table <- rbindlist(list(dt_inner,
data.table(Категория = category_env, Стоимость = cost_env, Комментарий = comment_env)), use.names = TRUE, fill=TRUE)
table
category_env
cost_env
comment_env
to_tg_table(table)
to_tg_table(table)
comment_env
is.na(comment_env)
if(is.na(comment_env)) {
comment_env <<- ""
}
comment_env
dt_inner <- cost_data %>% copy()
today <- as.POSIXct(Sys.Date())
table <- rbindlist(list(dt_inner,
data.table(Категория = category_env, Стоимость = cost_env, Комментарий = comment_env)), use.names = TRUE, fill=TRUE)
table
dt_inner <- cost_data %>% copy()
today <- as.POSIXct(Sys.Date())
table <- rbindlist(list(dt_inner,
data.table(Дата = today, Категория = category_env, Стоимость = cost_env, Комментарий = comment_env)), use.names = TRUE, fill=TRUE)
table
to_tg_table(table)
to_tg_table
# функция для перевода data.frame в telegram таблицу
to_tg_table <- function(table, align = NULL, indents = 3, parse_mode = 'Markdown' ) {
# если выравнивание не задано то выравниваем по левому краю
if ( is.null(align) ) {
col_num <- length(table)
align   <- str_c( rep('l', col_num), collapse = '' )
}
# проверяем правильно ли заданно выравнивание
if ( length(table) != nchar(align) ) {
align <- NULL
}
# новое выравнивание столбцов
side <- sapply(1:nchar(align),
function(x) {
letter <- substr(align, x, x)
switch (letter,
'l' = 'right',
'r' = 'left',
'c' = 'both',
'left'
)
})
# сохраняем имена
t_names      <- names(table)
# вычисляем ширину столбцов
names_length <- sapply(t_names, nchar)
value_length <- sapply(table, function(x) max(nchar(as.character(x))))
max_length   <- ifelse(value_length > names_length, value_length, names_length)
# подгоняем размер имён столбцов под их ширину + указанное в indents к-во пробелов
t_names <- mapply(str_pad,
string = t_names,
width  = max_length + indents,
side   = side)
# объединяем названия столбцов
str_names <- str_c(t_names, collapse = '')
# аргументы для фукнции str_pad
rules <- list(string = table, width = max_length + indents, side = side)
# поочереди переводим каждый столбец к нужному виду
t_str <-   pmap_df( rules, str_pad )%>%
unite("data", everything(), remove = TRUE, sep = '') %>%
unlist(.) %>%
str_c(collapse = '\n')
# если таблица занимает более 4096 символов обрезаем её
if ( nchar(t_str) >= 4021 ) {
warning('Таблица составляет более 4096 символов!')
t_str <- substr(t_str, 1, 4021)
}
# символы выделения блока кода согласно выбранной разметке
code_block <- switch(parse_mode,
'Markdown' = c('```', '```'),
'HTML' = c('<code>', '</code>'))
# переводим в code
res <- str_c(code_block[1], str_names, t_str, code_block[2], sep = '\n')
return(res)
}
table
to_tg_table(table)
to_tg_table(table)
to_tg_table(table)
to_tg_table(table)
table
to_tg_table(dt_inner)
to_tg_table(cost_data)
library(telegram.bot)
library(googlesheets4)
library(data.table)
library(lubridate)
state_env <- "asd"
source("envFunction.R")
# googlesheets4::gs4_auth()
source("GoogleConn.R")
#
source("Functions.R")
source("GoogleFunctions.R")
# Для обработки диалога
source("Handlers.R")
source("MessageFilters.R")
# создаём экземпляр класса Updater
updater <- Updater(token = Sys.getenv("R_TELEGRAM_BOT_my_life"))
# Пишем метод для приветсвия
say_hello <- function(bot, update) {
# Имя пользователя с которым надо поздароваться
user_name <- update$effective_user()$first_name
# Отправка приветственного сообщения
bot$sendMessage(update$from_chat_id(),
text = paste0("Моё почтение, ", user_name, "!"),
parse_mode = "Markdown")
}
# создаём обработчик
day <- CommandHandler('day', get_cost_day)
week <- CommandHandler('week', get_cost_week)
month <- CommandHandler('month', get_cost_month)
# Регистрируем
updater <- updater + day + week + month
# Для диалога
updater <- updater + start_h + state_h + reset_h + wait_category_h + wait_cost_h + wait_comment_h
# запускаем бота
updater$start_polling()
table
to_tg_table(table, indents = 5)
to_tg_table(table, indents = 3)
to_tg_table(table, indents = 4)
to_tg_table(table, indents = 6)
to_tg_table(table, indents = 7)
table
align = NULL
indents = 3
parse_mode = 'Markdown'
# если выравнивание не задано то выравниваем по левому краю
if ( is.null(align) ) {
col_num <- length(table)
align   <- str_c( rep('l', col_num), collapse = '' )
}
# проверяем правильно ли заданно выравнивание
if ( length(table) != nchar(align) ) {
align <- NULL
}
# новое выравнивание столбцов
side <- sapply(1:nchar(align),
function(x) {
letter <- substr(align, x, x)
switch (letter,
'l' = 'right',
'r' = 'left',
'c' = 'both',
'left'
)
})
# сохраняем имена
t_names      <- names(table)
t_names
# вычисляем ширину столбцов
names_length <- sapply(t_names, nchar)
value_length <- sapply(table, function(x) max(nchar(as.character(x))))
max_length   <- ifelse(value_length > names_length, value_length, names_length)
names_length
value_length
max_length
table
table[, Комментарий := fifelse(is.na(Комментарий), "", Комментарий)]
table
library(telegram.bot)
library(googlesheets4)
library(data.table)
library(lubridate)
state_env <- "asd"
source("envFunction.R")
# googlesheets4::gs4_auth()
source("GoogleConn.R")
#
source("Functions.R")
source("GoogleFunctions.R")
# Для обработки диалога
source("Handlers.R")
source("MessageFilters.R")
# создаём экземпляр класса Updater
updater <- Updater(token = Sys.getenv("R_TELEGRAM_BOT_my_life"))
# Пишем метод для приветсвия
say_hello <- function(bot, update) {
# Имя пользователя с которым надо поздароваться
user_name <- update$effective_user()$first_name
# Отправка приветственного сообщения
bot$sendMessage(update$from_chat_id(),
text = paste0("Моё почтение, ", user_name, "!"),
parse_mode = "Markdown")
}
# создаём обработчик
day <- CommandHandler('day', get_cost_day)
week <- CommandHandler('week', get_cost_week)
month <- CommandHandler('month', get_cost_month)
# Регистрируем
updater <- updater + day + week + month
# Для диалога
updater <- updater + start_h + state_h + reset_h + wait_category_h + wait_cost_h + wait_comment_h
# запускаем бота
updater$start_polling()
library(telegram.bot)
library(googlesheets4)
library(data.table)
library(lubridate)
state_env <- "asd"
source("envFunction.R")
# googlesheets4::gs4_auth()
source("GoogleConn.R")
#
source("Functions.R")
source("GoogleFunctions.R")
# Для обработки диалога
source("Handlers.R")
source("MessageFilters.R")
# создаём экземпляр класса Updater
updater <- Updater(token = Sys.getenv("R_TELEGRAM_BOT_my_life"))
# Пишем метод для приветсвия
say_hello <- function(bot, update) {
# Имя пользователя с которым надо поздароваться
user_name <- update$effective_user()$first_name
# Отправка приветственного сообщения
bot$sendMessage(update$from_chat_id(),
text = paste0("Моё почтение, ", user_name, "!"),
parse_mode = "Markdown")
}
# создаём обработчик
day <- CommandHandler('day', get_cost_day)
week <- CommandHandler('week', get_cost_week)
month <- CommandHandler('month', get_cost_month)
# Регистрируем
updater <- updater + day + week + month
# Для диалога
updater <- updater + start_h + state_h + reset_h + wait_category_h + wait_cost_h + wait_comment_h
# запускаем бота
updater$start_polling()
warnings()
